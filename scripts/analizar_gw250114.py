#!/usr/bin/env python3
"""
Framework de an√°lisis GW250114 - Preparado para ejecuci√≥n autom√°tica
Aplicar√° la metodolog√≠a validada en GW150914 al evento objetivo GW250114.
"""
import sys
import os
import numpy as np
import matplotlib.pyplot as plt
from gwpy.timeseries import TimeSeries
from gwpy.time import to_gps
from scipy import signal, stats
from scipy.optimize import curve_fit
import warnings
from datetime import datetime

# Importar funciones de validaci√≥n del script GW150914
try:
    from validar_gw150914 import (
        preprocess_data, extract_ringdown, calculate_bayes_factor, 
        estimate_p_value_timeslides, damped_sine_model, two_mode_model
    )
except ImportError:
    print("‚ö†Ô∏è  Importando funciones desde validar_gw150914.py")
    # Las funciones se redefinir√°n si no est√°n disponibles


class VerificadorGW250114:
    """
    Verificador de disponibilidad del evento GW250114 en GWOSC.
    Implementa la funcionalidad de verificaci√≥n proactiva y b√∫squeda de eventos similares.
    """
    
    def __init__(self):
        """Inicializar verificador con cat√°logo de eventos conocidos"""
        self.estado_actual = None
        self.eventos_conocidos = {
            'GW150914': {'gps': 1126259462.423, 'tipo': 'BBH', 'mass_total': 65},
            'GW151226': {'gps': 1135136350.6, 'tipo': 'BBH', 'mass_total': 22},
            'GW170104': {'gps': 1167559936.6, 'tipo': 'BBH', 'mass_total': 50},
            'GW170814': {'gps': 1186741861.5, 'tipo': 'BBH', 'mass_total': 56},
            'GW170823': {'gps': 1187008882.4, 'tipo': 'BBH', 'mass_total': 40},
            'GW170817': {'gps': 1187008882.4, 'tipo': 'BNS', 'mass_total': 2.8}
        }
        self.eventos_similares = []
        
    def verificar_disponibilidad_evento(self, offline_mode=False):
        """
        Verifica si GW250114 est√° disponible en GWOSC.
        
        Args:
            offline_mode (bool): Si es True, asume modo offline y no intenta conectarse
        
        Returns:
            bool: True si est√° disponible, False en caso contrario
        """
        print("üîç Verificando disponibilidad de GW250114 en GWOSC...")
        
        if offline_mode:
            print("   üì¥ Modo offline: Saltando prueba de conectividad")
            print("   üîç GW250114 es un evento objetivo hipot√©tico")
            self.estado_actual = "NO_DISPONIBLE"
            print(f"   üìã Estado: {self.estado_actual}")
            return False
        
        try:
            # Intentar verificar conectividad con GWOSC primero
            test_event = 'GW150914'
            test_gps = self.eventos_conocidos[test_event]['gps']
            
            # Test de conectividad con evento conocido
            print(f"   üì° Probando conectividad con {test_event}...")
            data = TimeSeries.fetch_open_data('H1', test_gps-1, test_gps+1, verbose=False)
            print(f"   ‚úÖ Acceso a cat√°logo confirmado (test con {test_event})")
            
            # Buscar GW250114 en cat√°logo
            # Nota: GW250114 es un evento hipot√©tico para este an√°lisis
            print("   üîç Buscando GW250114 en cat√°logo GWTC...")
            
            # GW250114 no est√° disponible a√∫n (es hipot√©tico)
            self.estado_actual = "NO_DISPONIBLE"
            print(f"   üìã Estado: {self.estado_actual}")
            print("   üí° GW250114 es un evento objetivo hipot√©tico")
            
            return False
            
        except Exception as e:
            print(f"   ‚ùå Error accediendo cat√°logo: {str(e)[:100]}...")
            print("   üí° Posible problema de conectividad o modo offline")
            self.estado_actual = "ERROR_CONEXION"
            return False
    
    def verificar_eventos_similares(self, offline_mode=False):
        """
        Busca eventos similares disponibles en GWOSC que puedan servir
        para validar la metodolog√≠a mientras GW250114 no est√© disponible.
        
        Args:
            offline_mode (bool): Si es True, simula b√∫squeda sin conectarse a GWOSC
        """
        print("üîç Buscando eventos similares disponibles en GWOSC...")
        print("   üìã Criterios: Eventos BBH con ringdown detectable\n")
        
        self.eventos_similares = []
        
        for evento, info in self.eventos_conocidos.items():
            try:
                print(f"   üîπ {evento}:")
                print(f"      ‚Ä¢ Tipo: {info['tipo']}")
                print(f"      ‚Ä¢ GPS: {info['gps']}")
                print(f"      ‚Ä¢ Masa total: ~{info['mass_total']} M‚òâ")
                
                # Verificar disponibilidad del evento
                print(f"      ‚Ä¢ Verificando disponibilidad...", end=" ")
                gps = info['gps']
                
                if offline_mode:
                    # En modo offline, asumimos que eventos conocidos est√°n disponibles
                    if info['tipo'] == 'BBH':
                        print("‚úÖ DISPONIBLE (offline mode)")
                        self.eventos_similares.append({
                            'nombre': evento,
                            'gps': gps,
                            'tipo': info['tipo'],
                            'masa_total': info['mass_total'],
                            'disponible': True
                        })
                    else:
                        print("‚ö†Ô∏è  NO BBH (offline mode)")
                        self.eventos_similares.append({
                            'nombre': evento,
                            'gps': gps,
                            'tipo': info['tipo'],
                            'masa_total': info['mass_total'],
                            'disponible': False
                        })
                else:
                    # Intentar descargar un peque√±o segmento
                    try:
                        test_data = TimeSeries.fetch_open_data(
                            'H1', gps-1, gps+1, 
                            verbose=False, 
                            cache=False
                        )
                        print("‚úÖ DISPONIBLE")
                        
                        self.eventos_similares.append({
                            'nombre': evento,
                            'gps': gps,
                            'tipo': info['tipo'],
                            'masa_total': info['mass_total'],
                            'disponible': True
                        })
                        
                    except Exception:
                        print("‚ùå NO DISPONIBLE")
                        self.eventos_similares.append({
                            'nombre': evento,
                            'gps': gps,
                            'tipo': info['tipo'],
                            'masa_total': info['mass_total'],
                            'disponible': False
                        })
                
                print()
                
            except Exception as e:
                print(f"      ‚ö†Ô∏è  Error verificando {evento}: {str(e)[:50]}...\n")
        
        # Resumen
        disponibles = [e for e in self.eventos_similares if e.get('disponible', False)]
        print(f"\nüìä RESUMEN DE B√öSQUEDA:")
        print(f"   ‚Ä¢ Eventos verificados: {len(self.eventos_similares)}")
        print(f"   ‚Ä¢ Eventos disponibles: {len(disponibles)}")
        
        if disponibles:
            print(f"\n‚úÖ EVENTOS DISPONIBLES PARA AN√ÅLISIS:")
            for evento in disponibles:
                print(f"   ‚Ä¢ {evento['nombre']} - {evento['tipo']} ({evento['masa_total']} M‚òâ)")
            print(f"\nüí° Estos eventos pueden usarse para validar la metodolog√≠a")
            print(f"   mientras esperamos la liberaci√≥n de GW250114")
        else:
            print(f"\n‚ö†Ô∏è  No se encontraron eventos disponibles en este momento")
            print(f"   üí° Intentar m√°s tarde o verificar conectividad")
        
        return self.eventos_similares

def check_gw250114_availability():
    """Verificar si GW250114 est√° disponible en GWOSC"""
    print("üîç Verificando disponibilidad de GW250114 en GWOSC...")
    
    # Lista de eventos conocidos para verificar conectividad
    known_events = {
        'GW150914': 1126259462.423,
        'GW151226': 1135136350.6,  
        'GW170104': 1167559936.6,
        'GW170814': 1186741861.5,
        'GW170823': 1187008882.4
    }
    
    # Intentar buscar GW250114 en cat√°logo p√∫blico
    try:
        # Nota: GW250114 es un evento hipot√©tico para este an√°lisis
        # El framework detectar√° autom√°ticamente cuando est√© disponible
        
        print("   üìã GW250114 es un evento objetivo hipot√©tico")
        print("   üîç Verificando acceso a cat√°logo GWTC...")
        
        # Verificar que podemos acceder a eventos conocidos
        test_event = 'GW150914'
        test_gps = known_events[test_event]
        
        # Test de conectividad con evento conocido
        data = TimeSeries.fetch_open_data('H1', test_gps-1, test_gps+1, verbose=False)
        print(f"   ‚úÖ Acceso a cat√°logo confirmado (test con {test_event})")
        
        return False, "GW250114 no est√° disponible a√∫n - usar datos sint√©ticos"
        
    except Exception as e:
        print(f"   ‚ùå Error accediendo cat√°logo: {e}")
        return False, str(e)

def generate_synthetic_gw250114():
    """Generar datos sint√©ticos de GW250114 para testing del framework"""
    print("üß™ Generando datos sint√©ticos de GW250114 para testing...")
    
    # Par√°metros sint√©ticos basados en GW150914 pero modificados
    sample_rate = 4096
    duration = 32  # segundos
    t = np.arange(0, duration, 1/sample_rate)
    
    # Simular ruido gaussiano
    noise_h1 = np.random.normal(0, 1e-23, len(t))
    noise_l1 = np.random.normal(0, 1e-23, len(t))
    
    # Simular merger time (centro de la ventana)
    merger_idx = len(t) // 2
    merger_time_synthetic = t[merger_idx]
    
    # Simular se√±al de ringdown con componente en 141.7 Hz
    ringdown_start_idx = merger_idx + int(0.01 * sample_rate)  # 10ms post-merger
    ringdown_duration = int(0.05 * sample_rate)  # 50ms de ringdown
    
    # Modelo de dos modos: dominante (~250 Hz) + objetivo (141.7 Hz)
    t_ringdown = t[ringdown_start_idx:ringdown_start_idx + ringdown_duration] - merger_time_synthetic
    
    # Modo dominante
    signal_dominant = 2e-21 * np.exp(-t_ringdown/0.01) * np.cos(2*np.pi*250*t_ringdown)
    
    # Modo objetivo (141.7 Hz) - m√°s fuerte que en GW150914 para testing
    signal_target = 5e-22 * np.exp(-t_ringdown/0.015) * np.cos(2*np.pi*141.7*t_ringdown + np.pi/4)
    
    # Combinar se√±ales
    signal_total = signal_dominant + signal_target
    
    # Insertar en ruido
    synthetic_h1 = noise_h1.copy()
    synthetic_l1 = noise_l1.copy()
    
    synthetic_h1[ringdown_start_idx:ringdown_start_idx + ringdown_duration] += signal_total
    synthetic_l1[ringdown_start_idx:ringdown_start_idx + ringdown_duration] += signal_total * 0.7  # Factor de detector
    
    print(f"   ‚úÖ Datos sint√©ticos generados: {duration}s a {sample_rate} Hz")
    print(f"   ‚úÖ Se√±al insertada: Dominante 250 Hz + Objetivo 141.7 Hz")
    
    return synthetic_h1, synthetic_l1, merger_time_synthetic, sample_rate

def create_synthetic_timeseries(data_array, gps_start, sample_rate):
    """Crear TimeSeries sint√©tico compatible con GWPy"""
    return TimeSeries(
        data_array, 
        t0=gps_start,
        sample_rate=sample_rate,
        unit='strain'
    )

def analyze_gw250114_synthetic():
    """Analizar GW250114 sint√©tico con metodolog√≠a validada"""
    print("\nüéØ AN√ÅLISIS GW250114 (DATOS SINT√âTICOS)")
    print("=" * 50)
    
    # Generar datos sint√©ticos
    h1_strain, l1_strain, merger_time, sample_rate = generate_synthetic_gw250114()
    
    # Crear TimeSeries para compatibilidad
    gps_start = 2000000000  # GPS ficticio para GW250114
    
    h1_data = create_synthetic_timeseries(h1_strain, gps_start, sample_rate)
    l1_data = create_synthetic_timeseries(l1_strain, gps_start, sample_rate)
    
    merger_gps = gps_start + merger_time
    
    # Aplicar metodolog√≠a validada
    results = {}
    
    for detector_name, detector_data in [('H1', h1_data), ('L1', l1_data)]:
        print(f"\nüîç Analizando {detector_name}...")
        
        # Preprocesamiento
        processed = preprocess_data(detector_data)
        
        # Extraer ringdown
        ringdown = extract_ringdown(processed, merger_gps)
        
        # Calcular Bayes Factor
        bf, chi2_single, chi2_double = calculate_bayes_factor(ringdown)
        
        # Estimar p-value
        p_value, snr, bg_snrs = estimate_p_value_timeslides(ringdown)
        
        results[detector_name] = {
            'bayes_factor': bf,
            'p_value': p_value,
            'snr': snr,
            'chi2_single': chi2_single,
            'chi2_double': chi2_double
        }
        
        print(f"   üìä {detector_name}: BF={bf:.2f}, p={p_value:.4f}, SNR={snr:.2f}")
    
    return results

def analyze_gw250114_real():
    """Analizar GW250114 real cuando est√© disponible"""
    print("\nüéØ AN√ÅLISIS GW250114 (DATOS REALES)")
    print("=" * 50)
    
    # Esto se implementar√° cuando GW250114 est√© disponible
    print("üìã Esperando liberaci√≥n de datos GW250114...")
    
    # Template para implementaci√≥n futura:
    """
    # Cuando GW250114 est√© disponible:
    
    try:
        # Obtener par√°metros del evento desde GWOSC
        gw250114_gps = get_event_gps('GW250114')  # A implementar
        start = gw250114_gps - 16
        end = gw250114_gps + 16
        
        # Descargar datos reales
        h1_data = TimeSeries.fetch_open_data('H1', start, end)
        l1_data = TimeSeries.fetch_open_data('L1', start, end)
        
        # Aplicar metodolog√≠a validada (id√©ntica a GW150914)
        results_h1 = validate_detector(h1_data, 'H1', gw250114_gps)
        results_l1 = validate_detector(l1_data, 'L1', gw250114_gps)
        
        return results_h1, results_l1
        
    except Exception as e:
        print(f"Error: {e}")
        return None, None
    """
    
    return None

def main():
    """Ejecutar an√°lisis GW250114"""
    print("üåå FRAMEWORK DE AN√ÅLISIS GW250114")
    print("=" * 60)
    
    # Verificar disponibilidad
    available, message = check_gw250114_availability()
    
    if not available:
        print(f"üìã {message}")
        print("\nüß™ Ejecutando an√°lisis con datos sint√©ticos de prueba...")
        
        # An√°lisis sint√©tico para validar framework
        synthetic_results = analyze_gw250114_synthetic()
        
        print(f"\nüìà RESULTADOS SINT√âTICOS:")
        print("=" * 30)
        
        for detector in ['H1', 'L1']:
            result = synthetic_results[detector]
            bf_ok = result['bayes_factor'] > 10
            p_ok = result['p_value'] < 0.01
            
            print(f"{detector}: BF={result['bayes_factor']:.2f} {'‚úÖ' if bf_ok else '‚ùå'}, "
                  f"p={result['p_value']:.4f} {'‚úÖ' if p_ok else '‚ùå'}")
        
        print("\nüéØ CONCLUSI√ìN:")
        print("‚úÖ Framework funcionando correctamente")
        print("üìã Listo para aplicar a datos reales de GW250114")
        print("üîî Ejecutar autom√°ticamente cuando GW250114 est√© disponible")
        
        return 0
        
    else:
        print("üöÄ GW250114 disponible - iniciando an√°lisis real...")
        
        # An√°lisis real (cuando est√© disponible)
        real_results = analyze_gw250114_real()
        
        if real_results is None:
            print("‚ùå Error en an√°lisis real")
            return 1
        
        # Evaluaci√≥n de resultados reales
        # (Se implementar√° cuando tengamos datos reales)
        
        return 0

if __name__ == "__main__":
    # Importar funciones si no est√°n disponibles
    if 'preprocess_data' not in globals():
        print("üîß Importando funciones de validaci√≥n...")
        exec(open('validar_gw150914.py').read())
    
    warnings.filterwarnings('ignore', category=RuntimeWarning)
    sys.exit(main())