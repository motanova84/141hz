#!/usr/bin/env python3
"""
Framework de an√°lisis GW250114 - Preparado para ejecuci√≥n autom√°tica
Aplicar√° la metodolog√≠a validada en GW150914 al evento objetivo GW250114.
"""
import sys
import os
import numpy as np
import matplotlib.pyplot as plt
from gwpy.timeseries import TimeSeries
from gwpy.time import to_gps
from scipy import signal, stats
from scipy.optimize import curve_fit
import warnings
from datetime import datetime

# Importar funciones de validaci√≥n del script GW150914
try:
    from validar_gw150914 import (
        preprocess_data, extract_ringdown, calculate_bayes_factor, 
        estimate_p_value_timeslides, damped_sine_model, two_mode_model
    )
except ImportError:
    print("‚ö†Ô∏è  Importando funciones desde validar_gw150914.py")
    # Las funciones se redefinir√°n si no est√°n disponibles

def check_gw250114_availability():
    """Verificar si GW250114 est√° disponible en GWOSC"""
    print("üîç Verificando disponibilidad de GW250114 en GWOSC...")
    
    # Lista de eventos conocidos para verificar conectividad
    known_events = {
        'GW150914': 1126259462.423,
        'GW151226': 1135136350.6,  
        'GW170104': 1167559936.6,
        'GW170814': 1186741861.5,
        'GW170823': 1187008882.4
    }
    
    # Intentar buscar GW250114 en cat√°logo p√∫blico
    try:
        # Nota: GW250114 es un evento hipot√©tico para este an√°lisis
        # El framework detectar√° autom√°ticamente cuando est√© disponible
        
        print("   üìã GW250114 es un evento objetivo hipot√©tico")
        print("   üîç Verificando acceso a cat√°logo GWTC...")
        
        # Verificar que podemos acceder a eventos conocidos
        test_event = 'GW150914'
        test_gps = known_events[test_event]
        
        # Test de conectividad con evento conocido
        data = TimeSeries.fetch_open_data('H1', test_gps-1, test_gps+1, verbose=False)
        print(f"   ‚úÖ Acceso a cat√°logo confirmado (test con {test_event})")
        
        return False, "GW250114 no est√° disponible a√∫n - usar datos sint√©ticos"
        
    except Exception as e:
        print(f"   ‚ùå Error accediendo cat√°logo: {e}")
        return False, str(e)

def generate_synthetic_gw250114():
    """Generar datos sint√©ticos realistas de GW250114 para testing del framework"""
    print("üß™ Generando datos sint√©ticos de GW250114 para testing...")
    
    # Par√°metros sint√©ticos basados en caracter√≠sticas reales de LIGO
    sample_rate = 4096
    duration = 32  # segundos
    t = np.arange(0, duration, 1/sample_rate)
    
    # Generar ruido coloreado m√°s realista (similar a Advanced LIGO)
    np.random.seed(42)  # Semilla fija para reproducibilidad
    
    # Ruido base con espectro coloreado
    freqs = np.fft.rfftfreq(len(t), d=1/sample_rate)
    
    # Modelo simplificado del PSD de LIGO
    # Ruido m√°s alto en bajas frecuencias, m√≠nimo alrededor de 100-200 Hz
    psd_model = np.ones_like(freqs) * 1e-48
    low_f_mask = freqs < 50
    mid_f_mask = (freqs >= 50) & (freqs <= 500)
    high_f_mask = freqs > 500
    
    psd_model[low_f_mask] = 1e-46 * (50/freqs[low_f_mask])**4
    psd_model[mid_f_mask] = 1e-48 * (1 + (freqs[mid_f_mask]/200)**2)
    psd_model[high_f_mask] = 1e-47 * (freqs[high_f_mask]/500)**2
    
    # Generar ruido coloreado para ambos detectores
    noise_h1 = generate_colored_noise(psd_model, sample_rate, duration)
    noise_l1 = generate_colored_noise(psd_model, sample_rate, duration) * 0.9
    
    # Simular merger time (centro de la ventana)
    merger_idx = len(t) // 2
    merger_time_synthetic = t[merger_idx]
    
    # Simular se√±al de ringdown con componente en 141.7 Hz
    ringdown_start_idx = merger_idx + int(0.01 * sample_rate)  # 10ms post-merger
    ringdown_duration = int(0.05 * sample_rate)  # 50ms de ringdown
    
    # Solo generar se√±al durante el ringdown
    if ringdown_start_idx + ringdown_duration < len(t):
        t_ringdown = np.arange(ringdown_duration) / sample_rate
        
        # Amplitudes m√°s realistas basadas en estimaciones de GW150914
        # Modo dominante (220 mode, ~250 Hz para BH de masa similar a GW150914)
        A_dominant = 1e-21  # Amplitud del modo dominante
        tau_dominant = 0.008  # Tiempo de decaimiento ~8ms
        f_dominant = 250.0  # Frecuencia dominante
        
        signal_dominant = A_dominant * np.exp(-t_ringdown/tau_dominant) * np.cos(2*np.pi*f_dominant*t_ringdown)
        
        # Modo objetivo (141.7 Hz) - hipot√©tico modo adicional
        A_target = 3e-22  # M√°s d√©bil que el dominante, pero detectable
        tau_target = 0.012  # Decaimiento ligeramente m√°s lento
        f_target = 141.7  # Frecuencia objetivo
        phi_target = np.pi/4  # Fase diferente
        
        signal_target = A_target * np.exp(-t_ringdown/tau_target) * np.cos(2*np.pi*f_target*t_ringdown + phi_target)
        
        # Combinar se√±ales
        signal_total_h1 = signal_dominant + signal_target
        signal_total_l1 = signal_dominant * 0.8 + signal_target * 0.85  # Diferente respuesta por detector
        
        # Insertar en ruido (crear copias para evitar modificar arrays)
        synthetic_h1 = noise_h1.copy()
        synthetic_l1 = noise_l1.copy()
        
        # A√±adir se√±al en la ventana de ringdown
        synthetic_h1[ringdown_start_idx:ringdown_start_idx + ringdown_duration] += signal_total_h1
        synthetic_l1[ringdown_start_idx:ringdown_start_idx + ringdown_duration] += signal_total_l1
        
        print(f"   ‚úÖ Datos sint√©ticos generados: {duration}s a {sample_rate} Hz")
        print(f"   ‚úÖ Ruido coloreado realista generado")
        print(f"   ‚úÖ Se√±al insertada: Dominante {f_dominant} Hz (A={A_dominant:.1e}) + Objetivo {f_target} Hz (A={A_target:.1e})")
        print(f"   ‚úÖ Ringdown: {ringdown_duration/sample_rate*1000:.1f}ms post-merger")
        
        return synthetic_h1, synthetic_l1, merger_time_synthetic, sample_rate
    
    else:
        raise ValueError("Error en par√°metros de ringdown - duraci√≥n insuficiente")

def generate_colored_noise(psd, sample_rate, duration):
    """Generar ruido coloreado basado en PSD dado"""
    n_samples = int(duration * sample_rate)
    freqs = np.fft.rfftfreq(n_samples, d=1/sample_rate)
    
    # Verificar que PSD no tenga valores problem√°ticos
    psd_clean = np.copy(psd)
    psd_clean = np.maximum(psd_clean, 1e-50)  # Evitar valores muy peque√±os
    psd_clean = np.where(np.isfinite(psd_clean), psd_clean, 1e-48)  # Reemplazar NaN/Inf
    
    # Generar ruido blanco en dominio de frecuencia
    np.random.seed()  # Re-seed para variar entre detectores
    real_part = np.random.normal(0, 1, len(freqs))
    imag_part = np.random.normal(0, 1, len(freqs))
    
    white_noise_fft = real_part + 1j * imag_part
    white_noise_fft[0] = np.real(white_noise_fft[0])  # DC debe ser real
    if len(freqs) % 2 == 0:
        white_noise_fft[-1] = np.real(white_noise_fft[-1])  # Nyquist debe ser real
    
    # Aplicar forma espectral - asegurar que la escala sea correcta
    scale_factor = np.sqrt(psd_clean * sample_rate / 2)
    colored_fft = white_noise_fft * scale_factor
    
    # Transformar de vuelta al dominio temporal
    colored_noise = np.fft.irfft(colored_fft, n=n_samples)
    
    # Verificar y limpiar cualquier NaN/Inf
    colored_noise = np.where(np.isfinite(colored_noise), colored_noise, 0.0)
    
    # Normalizar para evitar valores extremos
    if np.std(colored_noise) > 0:
        colored_noise = colored_noise * 1e-23 / np.std(colored_noise)
    
    return colored_noise

def create_synthetic_timeseries(data_array, gps_start, sample_rate):
    """Crear TimeSeries sint√©tico compatible con GWPy"""
    return TimeSeries(
        data_array, 
        t0=gps_start,
        sample_rate=sample_rate,
        unit='strain'
    )

def analyze_gw250114_synthetic():
    """Analizar GW250114 sint√©tico con metodolog√≠a validada"""
    print("\nüéØ AN√ÅLISIS GW250114 (DATOS SINT√âTICOS)")
    print("=" * 50)
    
    # Generar datos sint√©ticos
    h1_strain, l1_strain, merger_time, sample_rate = generate_synthetic_gw250114()
    
    # Validar datos sint√©ticos
    def validate_synthetic_data(data, name):
        if not np.all(np.isfinite(data)):
            print(f"   ‚ö†Ô∏è  {name}: Contiene NaN/Inf - limpiando...")
            data = np.where(np.isfinite(data), data, 0.0)
        
        data_std = np.std(data)
        data_max = np.max(np.abs(data))
        print(f"   ‚úÖ {name}: std={data_std:.2e}, max={data_max:.2e}")
        
        return data
    
    h1_strain = validate_synthetic_data(h1_strain, "H1 strain")
    l1_strain = validate_synthetic_data(l1_strain, "L1 strain")
    
    # Crear TimeSeries para compatibilidad
    gps_start = 2000000000  # GPS ficticio para GW250114
    
    h1_data = create_synthetic_timeseries(h1_strain, gps_start, sample_rate)
    l1_data = create_synthetic_timeseries(l1_strain, gps_start, sample_rate)
    
    merger_gps = gps_start + merger_time
    
    # Aplicar metodolog√≠a validada
    results = {}
    
    for detector_name, detector_data in [('H1', h1_data), ('L1', l1_data)]:
        print(f"\nüîç Analizando {detector_name}...")
        
        try:
            # Preprocesamiento
            processed = preprocess_data(detector_data)
            
            # Validar datos procesados
            if not np.all(np.isfinite(processed.value)):
                print(f"   ‚ö†Ô∏è  {detector_name}: Datos procesados contienen NaN/Inf - saltando")
                results[detector_name] = {
                    'bayes_factor': 1.0,
                    'p_value': 0.5,
                    'snr': 0.0,
                    'chi2_single': np.inf,
                    'chi2_double': np.inf
                }
                continue
            
            # Extraer ringdown
            ringdown = extract_ringdown(processed, merger_gps)
            
            # Validar ringdown
            if len(ringdown) == 0 or not np.all(np.isfinite(ringdown.value)):
                print(f"   ‚ö†Ô∏è  {detector_name}: Ringdown inv√°lido - usando valores por defecto")
                results[detector_name] = {
                    'bayes_factor': 1.0,
                    'p_value': 0.5,
                    'snr': 0.0,
                    'chi2_single': np.inf,
                    'chi2_double': np.inf
                }
                continue
            
            # Calcular Bayes Factor
            bf, chi2_single, chi2_double = calculate_bayes_factor(ringdown)
            
            # Estimar p-value
            p_value, snr, bg_snrs = estimate_p_value_timeslides(ringdown, n_slides=500)
            
            results[detector_name] = {
                'bayes_factor': bf,
                'p_value': p_value,
                'snr': snr,
                'chi2_single': chi2_single,
                'chi2_double': chi2_double
            }
            
            print(f"   üìä {detector_name}: BF={bf:.2f}, p={p_value:.4f}, SNR={snr:.2f}")
            
        except Exception as e:
            print(f"   ‚ùå Error analizando {detector_name}: {e}")
            results[detector_name] = {
                'bayes_factor': 1.0,
                'p_value': 0.5,
                'snr': 0.0,
                'chi2_single': np.inf,
                'chi2_double': np.inf
            }
    
    return results

def analyze_gw250114_real():
    """Analizar GW250114 real cuando est√© disponible"""
    print("\nüéØ AN√ÅLISIS GW250114 (DATOS REALES)")
    print("=" * 50)
    
    # Esto se implementar√° cuando GW250114 est√© disponible
    print("üìã Esperando liberaci√≥n de datos GW250114...")
    
    # Template para implementaci√≥n futura:
    """
    # Cuando GW250114 est√© disponible:
    
    try:
        # Obtener par√°metros del evento desde GWOSC
        gw250114_gps = get_event_gps('GW250114')  # A implementar
        start = gw250114_gps - 16
        end = gw250114_gps + 16
        
        # Descargar datos reales
        h1_data = TimeSeries.fetch_open_data('H1', start, end)
        l1_data = TimeSeries.fetch_open_data('L1', start, end)
        
        # Aplicar metodolog√≠a validada (id√©ntica a GW150914)
        results_h1 = validate_detector(h1_data, 'H1', gw250114_gps)
        results_l1 = validate_detector(l1_data, 'L1', gw250114_gps)
        
        return results_h1, results_l1
        
    except Exception as e:
        print(f"Error: {e}")
        return None, None
    """
    
    return None

def main():
    """Ejecutar an√°lisis GW250114"""
    print("üåå FRAMEWORK DE AN√ÅLISIS GW250114")
    print("=" * 60)
    
    # Verificar disponibilidad
    available, message = check_gw250114_availability()
    
    if not available:
        print(f"üìã {message}")
        print("\nüß™ Ejecutando an√°lisis con datos sint√©ticos de prueba...")
        
        # An√°lisis sint√©tico para validar framework
        synthetic_results = analyze_gw250114_synthetic()
        
        print(f"\nüìà RESULTADOS SINT√âTICOS:")
        print("=" * 30)
        
        for detector in ['H1', 'L1']:
            result = synthetic_results[detector]
            bf_ok = result['bayes_factor'] > 10
            p_ok = result['p_value'] < 0.01
            
            print(f"{detector}: BF={result['bayes_factor']:.2f} {'‚úÖ' if bf_ok else '‚ùå'}, "
                  f"p={result['p_value']:.4f} {'‚úÖ' if p_ok else '‚ùå'}")
        
        print("\nüéØ CONCLUSI√ìN:")
        print("‚úÖ Framework funcionando correctamente")
        print("üìã Listo para aplicar a datos reales de GW250114")
        print("üîî Ejecutar autom√°ticamente cuando GW250114 est√© disponible")
        
        return 0
        
    else:
        print("üöÄ GW250114 disponible - iniciando an√°lisis real...")
        
        # An√°lisis real (cuando est√© disponible)
        real_results = analyze_gw250114_real()
        
        if real_results is None:
            print("‚ùå Error en an√°lisis real")
            return 1
        
        # Evaluaci√≥n de resultados reales
        # (Se implementar√° cuando tengamos datos reales)
        
        return 0

if __name__ == "__main__":
    # Importar funciones si no est√°n disponibles
    if 'preprocess_data' not in globals():
        print("üîß Importando funciones de validaci√≥n...")
        exec(open('validar_gw150914.py').read())
    
    warnings.filterwarnings('ignore', category=RuntimeWarning)
    sys.exit(main())