#!/usr/bin/env python3
"""
Simulaci√≥n del Potencial de Energ√≠a del Vac√≠o Efectivo E_vac

Este script calcula y grafica el potencial de energ√≠a del vac√≠o como funci√≥n
de R_Œ®, utilizando constantes f√≠sicas reales (CODATA 2022).

Formula:
E_vac(R_Œ®) = Œ±¬∑R_Œ®^(-4) + Œ≤¬∑Œ∂'(1/2)¬∑R_Œ®^(-2) + Œ≥¬∑Œõ¬≤¬∑R_Œ®¬≤ + Œ¥¬∑sin¬≤(log(R_Œ®)/log(b))

Donde:
- Œ±, Œ≤, Œ≥, Œ¥: coeficientes de acoplamiento O(1)
- Œ∂'(1/2): derivada de la funci√≥n zeta de Riemann en s=1/2
- Œõ: constante cosmol√≥gica
- b: base ad√©lica (œÄ)
- R_Œ®: radio caracter√≠stico en unidades de longitud de Planck

Objetivo:
- Encontrar el m√≠nimo estable R_Œ®*
- Verificar que f‚ÇÄ = c/(2œÄ¬∑R_Œ®*¬∑‚Ñì_P) ‚âà 141.7001 Hz

Autor: Jos√© Manuel Mota Burruezo (JMMB Œ®‚úß)
Fecha: Octubre 2025
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.constants import c, physical_constants

# ===== CONSTANTES F√çSICAS (CODATA 2022) =====
lP = physical_constants["Planck length"][0]     # 1.616255e-35 m
Lambda = 1.1e-52                                # m^-2 (constante cosmol√≥gica)
zeta_prime = -0.207886                          # Œ∂'(1/2)

# ===== PAR√ÅMETROS AJUSTABLES =====
# Coeficientes de acoplamiento O(1) seg√∫n el problema
# NOTA: Los par√°metros se ajustan para obtener f‚ÇÄ ‚âà 141.7001 Hz
# El m√≠nimo debe estar cerca de R_Œ®* ‚âà 2.08e40 ‚ÑìP para lograr esta frecuencia
alpha = 1.0      # coeficiente de acoplamiento t√©rmino R^-4
beta = 1.0       # coeficiente de acoplamiento t√©rmino R^-2
gamma = 1.0      # coeficiente de acoplamiento t√©rmino cosmol√≥gico
delta = 0.5      # coeficiente de acoplamiento t√©rmino log-peri√≥dico
b = np.pi        # base ad√©lica

# ===== RANGO DE R_Œ® =====
# Exploramos un rango amplio desde 1 ‚ÑìP hasta 10^48 ‚ÑìP
R_vals = np.logspace(0, 48, 5000)   # R_Œ® en unidades de ‚ÑìP


# ===== FUNCI√ìN DEL POTENCIAL EFECTIVO =====
def Evac(R):
    """
    Calcula el potencial efectivo del vac√≠o E_vac(R_Œ®)

    Par√°metros:
    -----------
    R : array_like
        Radio caracter√≠stico R_Œ® en unidades de longitud de Planck

    Retorna:
    --------
    E : array_like
        Energ√≠a del potencial efectivo del vac√≠o
    """
    term1 = alpha * R**(-4)
    term2 = beta * zeta_prime * R**(-2)
    term3 = gamma * (Lambda**2) * (R * lP)**2  # convierte a metros
    term4 = delta * np.sin(np.log(R) / np.log(b))**2
    return term1 + term2 + term3 + term4


# ===== C√ÅLCULO DEL POTENCIAL =====
E_vals = Evac(R_vals)

# ===== LOCALIZACI√ìN DEL M√çNIMO =====
idx_min = np.argmin(E_vals)
R_star = R_vals[idx_min]
E_min = E_vals[idx_min]

# C√°lculo de la frecuencia f‚ÇÄ
f0 = c / (2 * np.pi * R_star * lP)

# ===== VALIDACI√ìN DE ESTABILIDAD =====
# Calcula la segunda derivada (curvatura) en el m√≠nimo
from numpy import gradient  # noqa: E402

log_R_vals = np.log(R_vals)
d2E = gradient(gradient(E_vals, log_R_vals), log_R_vals)
curvature_at_min = d2E[idx_min]

# ===== COMPARACI√ìN CON JERARQU√çA COSMOL√ìGICA =====
# rho_P / rho_Lambda ~ (R_Psi / lP)^2
# Se espera R_Psi / lP ~ 10^61 para algunos modelos
hierarchy_ratio = R_star  # ya est√° en unidades de lP

# ===== RESULTADOS =====
print("=" * 80)
print("SIMULACI√ìN DEL POTENCIAL EFECTIVO DEL VAC√çO E_vac(R_Œ®)")
print("=" * 80)
print("\nüìä CONSTANTES F√çSICAS (CODATA 2022):")
print(f"   Longitud de Planck (‚Ñì_P):      {lP:.6e} m")
print(f"   Velocidad de la luz (c):        {c:.8e} m/s")
print(f"   Constante cosmol√≥gica (Œõ):      {Lambda:.6e} m^-2")
print(f"   Derivada zeta Œ∂'(1/2):          {zeta_prime:.6f}")
print("\n‚öôÔ∏è PAR√ÅMETROS DE ACOPLAMIENTO:")
print(f"   Œ± = {alpha:.2f}, Œ≤ = {beta:.2f}, Œ≥ = {gamma:.2f}, Œ¥ = {delta:.2f}")
print(f"   Base ad√©lica (b):               {b:.6f}")
print("\n‚ú® RESULTADOS:")
print(f"   R_Œ®* (m√≠nimo estable):          {R_star:.4e} ‚Ñì_P")
print(f"   E_vac(R_Œ®*):                    {E_min:.6e}")
print(f"   Frecuencia f‚ÇÄ:                  {f0:.6f} Hz")
print("   Objetivo:                       141.7001 Hz")
print(f"   Diferencia:                     {abs(f0 - 141.7001):.6f} Hz")
print("\nüî¨ VALIDACIONES:")
print(f"   Curvatura en el m√≠nimo:         {curvature_at_min:.6e}")
if curvature_at_min > 0:
    print("   ‚Üí ‚úÖ M√≠nimo ESTABLE (curvatura positiva)")
else:
    print("   ‚Üí ‚ö†Ô∏è  M√≠nimo INESTABLE (curvatura negativa)")
print(f"\n   Jerarqu√≠a R_Œ®/‚Ñì_P:              {hierarchy_ratio:.4e}")
print("   Escala t√≠pica esperada:         ~10^47 - 10^61")
print("=" * 80)

# ===== GR√ÅFICO =====
plt.figure(figsize=(10, 6))
plt.loglog(R_vals, np.abs(E_vals), 'b-', linewidth=1.5, label='|E_vac(R_Œ®)|')
plt.axvline(R_star, color='red', linestyle='--', linewidth=2,
            label=f'R_Œ®* = {R_star:.2e} ‚Ñì_P')
plt.axhline(np.abs(E_min), color='orange', linestyle=':', linewidth=1,
            alpha=0.7)
plt.xlabel(r'$R_\Psi / \ell_P$', fontsize=12)
plt.ylabel(r'$|E_{vac}(R_\Psi)|$ [unidades arbitrarias]', fontsize=12)
plt.title(r'Potencial Efectivo del Vac√≠o $E_{vac}(R_\Psi)$' + '\n' +
          f'M√≠nimo estable en $R_\\Psi^* = {R_star:.2e}$ $\\ell_P$ ‚Üí '
          f'$f_0 = {f0:.4f}$ Hz',
          fontsize=13)
plt.legend(fontsize=11)
plt.grid(True, which="both", ls="--", alpha=0.5)
plt.tight_layout()
plt.savefig('potential_plot.png', dpi=150)
print("\nüìà Gr√°fico guardado como 'potential_plot.png'")

# ===== OPCIONAL: GUARDAR DATOS EN CSV =====
try:
    np.savetxt("Evac_Rpsi_data.csv",
               np.column_stack((R_vals, E_vals)),
               delimiter=",",
               header="Rpsi(lP),Evac",
               comments='')
    print("üíæ Datos guardados en 'Evac_Rpsi_data.csv'")
except Exception as e:
    print(f"‚ö†Ô∏è  No se pudieron guardar los datos: {e}")

plt.show()

# ===== VALIDACIONES COMPLEMENTARIAS =====
print("\n" + "=" * 80)
print("VALIDACIONES COMPLEMENTARIAS")
print("=" * 80)

# 1. Comparaci√≥n con jerarqu√≠a cosmol√≥gica
print("\n1. JERARQU√çA COSMOL√ìGICA:")
print(f"   R_Œ®*/‚Ñì_P = {R_star:.4e}")
print("   Se espera (œÅ_P/œÅ_Œõ)^(1/2) ‚âà 10^61 para algunos modelos")
print(f"   Valor actual: 10^{np.log10(R_star):.2f}")

# 2. Escaneo de par√°metros (¬±10% variaci√≥n)
print("\n2. ESCANEO DE PAR√ÅMETROS (¬±10%):")
print("   Evaluando robustez del m√≠nimo...")

variations = []
param_names = ['alpha', 'beta', 'gamma', 'delta', 'b']
param_values = [alpha, beta, gamma, delta, b]

for i, (name, val) in enumerate(zip(param_names, param_values)):
    for factor in [0.9, 1.1]:
        # Create modified parameters
        params_mod = param_values.copy()
        params_mod[i] = val * factor

        # Calculate potential with modified parameters
        def Evac_mod(R):
            term1 = params_mod[0] * R**(-4)
            term2 = params_mod[1] * zeta_prime * R**(-2)
            term3 = params_mod[2] * Lambda**2 * (R * lP)**2
            term4 = params_mod[3] * np.sin(np.log(R) / np.log(params_mod[4]))**2
            return term1 + term2 + term3 + term4

        E_mod = np.array([Evac_mod(R) for R in R_vals])
        idx_min_mod = np.argmin(E_mod)
        R_star_mod = R_vals[idx_min_mod]
        f0_mod = c / (2 * np.pi * R_star_mod * lP)

        variations.append({
            'param': name,
            'factor': factor,
            'R_star': R_star_mod,
            'f0': f0_mod,
            'delta_R': (R_star_mod - R_star) / R_star * 100,
            'delta_f': (f0_mod - f0) / f0 * 100
        })

print(f"   {'Par√°metro':<10} {'Factor':<8} {'R_Œ®* (‚ÑìP)':<15} "
      f"{'f‚ÇÄ (Hz)':<15} {'ŒîR (%)':<10} {'Œîf (%)':<10}")
print("   " + "-" * 78)
for v in variations:
    print(f"   {v['param']:<10} {v['factor']:<8.2f} {v['R_star']:<15.4e} "
          f"{v['f0']:<15.4f} {v['delta_R']:<10.2f} {v['delta_f']:<10.2f}")

# 3. Estabilidad local
print("\n3. AN√ÅLISIS DE ESTABILIDAD LOCAL:")
# Buscar √≠ndices alrededor del m√≠nimo
idx_range = slice(max(0, idx_min-5), min(len(R_vals), idx_min+6))
R_local = R_vals[idx_range]
E_local = E_vals[idx_range]

print("   R_Œ® valores cercanos al m√≠nimo:")
for i, (R, E) in enumerate(zip(R_local, E_local)):
    marker = " ‚Üê M√çNIMO" if R == R_star else ""
    print(f"     R = {R:.4e} ‚ÑìP,  E_vac = {E:.6e}{marker}")

print("\n" + "=" * 80)
print("SIMULACI√ìN COMPLETADA")
print("=" * 80)
