#!/usr/bin/env python3
"""
Ejemplo de integraci√≥n del verificador GW250114 con el pipeline existente
"""
import sys
from pathlib import Path

# Agregar directorio de scripts al path
sys.path.insert(0, str(Path(__file__).parent))

from verificador_gw250114 import VerificadorGW250114

def ejemplo_basico():
    """Ejemplo 1: Verificaci√≥n b√°sica de disponibilidad"""
    print("=" * 60)
    print("EJEMPLO 1: Verificaci√≥n b√°sica")
    print("=" * 60)
    
    verificador = VerificadorGW250114()
    
    # Verificar si GW250114 est√° disponible
    disponible = verificador.verificar_disponibilidad_evento()
    
    if disponible:
        print("‚úÖ GW250114 disponible - iniciar an√°lisis")
    else:
        print("‚è≥ GW250114 no disponible todav√≠a")
    
    print()

def ejemplo_verificacion_eventos_similares():
    """Ejemplo 2: Buscar eventos similares o preliminares"""
    print("=" * 60)
    print("EJEMPLO 2: B√∫squeda de eventos similares")
    print("=" * 60)
    
    verificador = VerificadorGW250114()
    
    # Buscar eventos que puedan ser GW250114 o versiones preliminares
    verificador.verificar_eventos_similares()
    
    print()

def ejemplo_analisis_evento():
    """Ejemplo 3: An√°lisis de un evento espec√≠fico (si est√° disponible)"""
    print("=" * 60)
    print("EJEMPLO 3: An√°lisis de evento (ejemplo conceptual)")
    print("=" * 60)
    
    verificador = VerificadorGW250114()
    
    # Este c√≥digo se ejecutar√≠a si GW250114 estuviera disponible:
    print("üìã Si GW250114 estuviera disponible, se ejecutar√≠a:")
    print("   1. Descarga de datos de detectores H1, L1, V1")
    print("   2. An√°lisis espectral en banda 140-143 Hz")
    print("   3. B√∫squeda de pico en 141.7001 Hz")
    print("   4. C√°lculo de SNR y significancia")
    print("   5. Generaci√≥n de informe JSON")
    
    print()

def ejemplo_integracion_pipeline():
    """Ejemplo 4: Integraci√≥n con pipeline de validaci√≥n existente"""
    print("=" * 60)
    print("EJEMPLO 4: Integraci√≥n con pipeline existente")
    print("=" * 60)
    
    print("üìã Flujo de integraci√≥n:")
    print("   1. Pipeline ejecuta validaci√≥n GW150914 (control)")
    print("   2. Si GW150914 pasa validaci√≥n (BF > 10, p < 0.01):")
    print("      ‚Üí Verificador busca GW250114 en cat√°logo")
    print("   3. Si GW250114 est√° disponible:")
    print("      ‚Üí Descarga autom√°tica de datos")
    print("      ‚Üí Aplicaci√≥n de metodolog√≠a validada")
    print("      ‚Üí Generaci√≥n de resultados")
    print("   4. Si GW250114 no disponible:")
    print("      ‚Üí B√∫squeda de eventos similares")
    print("      ‚Üí Modo de monitoreo opcional")
    
    print()

def ejemplo_resumen_resultados():
    """Ejemplo 5: Interpretaci√≥n de resultados"""
    print("=" * 60)
    print("EJEMPLO 5: Interpretaci√≥n de resultados")
    print("=" * 60)
    
    verificador = VerificadorGW250114()
    
    # Ejemplo de resultados que se generar√≠an
    resultados_ejemplo = {
        'H1': {
            'frecuencia_detectada': 141.7001,
            'snr': 7.5,
            'diferencia': 0.0001,
            'significativo': True,
            'potencia_pico': 1.2e-42
        },
        'L1': {
            'frecuencia_detectada': 141.75,
            'snr': 3.2,
            'diferencia': 0.0499,
            'significativo': False,
            'potencia_pico': 5.6e-43
        }
    }
    
    resumen = verificador.generar_resumen(resultados_ejemplo)
    
    print("üìä Ejemplo de resultados:")
    print(f"   Total detectores analizados: {resumen['total_detectores']}")
    print(f"   Detectores con se√±al significativa: {resumen['exitosos']}")
    print(f"   Tasa de √©xito: {resumen['tasa_exito']*100:.1f}%")
    print(f"   Detectores significativos: {resumen['detectores_significativos']}")
    
    print("\nüí° Interpretaci√≥n:")
    if resumen['exitosos'] >= 2:
        print("   ‚úÖ Se√±al confirmada en m√∫ltiples detectores")
        print("   ‚úÖ Alta confianza en detecci√≥n")
    elif resumen['exitosos'] == 1:
        print("   ‚ö†Ô∏è  Se√±al detectada en un solo detector")
        print("   ‚ö†Ô∏è  Se requiere an√°lisis adicional")
    else:
        print("   ‚ùå No se detect√≥ se√±al significativa")
        print("   ‚ùå Posible falso positivo o se√±al d√©bil")
    
    print()

def main():
    """Ejecutar todos los ejemplos"""
    print("\nüåå EJEMPLOS DE USO - VERIFICADOR GW250114")
    print("=" * 60)
    print()
    
    ejemplos = [
        ejemplo_basico,
        ejemplo_verificacion_eventos_similares,
        ejemplo_analisis_evento,
        ejemplo_integracion_pipeline,
        ejemplo_resumen_resultados
    ]
    
    for ejemplo in ejemplos:
        try:
            ejemplo()
        except Exception as e:
            print(f"‚ùå Error en ejemplo {ejemplo.__name__}: {e}")
    
    print("=" * 60)
    print("üìö Para m√°s informaci√≥n:")
    print("   - Ver: scripts/verificador_gw250114.py")
    print("   - Test: scripts/test_verificador_gw250114.py")
    print("   - Pipeline: scripts/pipeline_validacion.py")
    print("=" * 60)

if __name__ == "__main__":
    sys.exit(main())
