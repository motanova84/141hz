#!/usr/bin/env python3
"""
An√°lisis Avanzado con Transformadas Wavelet y Deconvoluci√≥n Cu√°ntica Espectral
Implementa m√©todos avanzados para la detecci√≥n de la firma arm√≥nica en 141.7001 Hz
"""
import sys
import os
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal, ndimage
from gwpy.timeseries import TimeSeries
import warnings

def wavelet_transform_analysis(data, target_freq=141.7, sample_rate=4096):
    """
    An√°lisis mediante Transformada Wavelet Continua (CWT)
    
    Par√°metros:
    -----------
    data : array
        Serie temporal de strain
    target_freq : float
        Frecuencia objetivo (Hz)
    sample_rate : float
        Frecuencia de muestreo (Hz)
    
    Retorna:
    --------
    dict con resultados del an√°lisis wavelet
    """
    print(f"üåä Aplicando Transformada Wavelet Continua...")
    
    # Calcular escalas para CWT (enfocadas en 130-160 Hz con mayor resoluci√≥n)
    freq_range = np.linspace(130, 160, 200)  # Mayor resoluci√≥n
    scales = sample_rate / (2 * np.pi * freq_range)
    
    # Calcular espectrograma wavelet
    cwt_matrix = np.zeros((len(freq_range), len(data)), dtype=complex)
    
    for i, freq in enumerate(freq_range):
        # Wavelet Morlet: psi(t) = exp(i*2*pi*f*t) * exp(-t^2/(2*sigma^2))
        # Ajustar sigma para mejorar resoluci√≥n frecuencial
        sigma = 2.0 / (2 * np.pi * freq)  # Ancho adaptativo basado en frecuencia
        wavelet_size = int(6 * sigma * sample_rate)  # 6-sigma width para mejor cobertura
        
        # Limitar tama√±o del wavelet y asegurar m√≠nimo de ciclos
        min_cycles = 3  # m√≠nimo de ciclos para que el wavelet sea significativo
        min_wavelet_size = int(np.ceil(min_cycles * sample_rate / freq))
        if wavelet_size > len(data):
            wavelet_size = len(data) // 2
        if wavelet_size < min_wavelet_size:
            wavelet_size = min_wavelet_size
        
        t_wavelet = np.linspace(-3*sigma, 3*sigma, wavelet_size)
        wavelet = np.exp(1j * 2 * np.pi * freq * t_wavelet) * np.exp(-t_wavelet**2 / (2 * sigma**2))
        wavelet = wavelet / np.sqrt(np.sum(np.abs(wavelet)**2))
        
        # Convoluci√≥n con modo 'same' para mantener tama√±o
        conv_result = np.convolve(data, wavelet, mode='same')
        cwt_matrix[i, :] = conv_result
    
    # Calcular potencia wavelet
    power = np.abs(cwt_matrix)**2
    
    # Encontrar m√°ximo en la banda objetivo
    target_idx = np.argmin(np.abs(freq_range - target_freq))
    target_power = power[target_idx, :]
    max_power = np.max(target_power)
    median_power = np.median(power)
    
    # Calcular SNR wavelet
    snr_wavelet = max_power / (median_power + 1e-30)
    
    # Detectar frecuencia dominante con mejor precisi√≥n
    # Usar perfil frecuencial promediado en tiempo
    freq_profile = np.mean(power, axis=1)
    
    # Encontrar pico principal
    detected_freq_idx = np.argmax(freq_profile)
    detected_freq = freq_range[detected_freq_idx]
    
    # Refinamiento: ajuste parab√≥lico alrededor del pico
    if 1 <= detected_freq_idx < len(freq_profile) - 1:
        # Usar 3 puntos para ajuste parab√≥lico
        y1, y2, y3 = freq_profile[detected_freq_idx-1:detected_freq_idx+2]
        f1, f2, f3 = freq_range[detected_freq_idx-1:detected_freq_idx+2]
        
        # Ajuste parab√≥lico para subpixel accuracy
        denom = (f1-f2)*(f1-f3)*(f2-f3)
        if abs(denom) > 1e-10:
            A = (f3*(y2-y1) + f2*(y1-y3) + f1*(y3-y2)) / denom
            B = (f3*f3*(y1-y2) + f2*f2*(y3-y1) + f1*f1*(y2-y3)) / denom
            if abs(A) > 1e-10:
                detected_freq = -B / (2*A)
                # Verificar que est√° en rango razonable
                if not (f1 <= detected_freq <= f3):
                    detected_freq = f2  # Usar valor original si el ajuste falla
    
    print(f"   ‚úÖ CWT completada")
    print(f"   üìä Frecuencia detectada: {detected_freq:.2f} Hz")
    print(f"   üìä SNR Wavelet: {snr_wavelet:.2f}")
    
    return {
        'cwt_matrix': cwt_matrix,
        'power': power,
        'frequencies': freq_range,
        'detected_freq': detected_freq,
        'snr_wavelet': snr_wavelet,
        'target_power': target_power
    }


def spectral_deconvolution(spectrum, frequencies, sigma=0.5, iterations=15):
    """
    Deconvoluci√≥n Cu√°ntica Espectral (Richardson-Lucy adaptada)
    
    Separa componentes arm√≥nicas superpuestas mediante deconvoluci√≥n iterativa.
    
    Par√°metros:
    -----------
    spectrum : array
        Espectro de potencia a deconvolucionar
    frequencies : array
        Array de frecuencias correspondiente
    sigma : float
        Ancho del kernel gaussiano (Hz)
    iterations : int
        N√∫mero de iteraciones Richardson-Lucy
    
    Retorna:
    --------
    array : Espectro deconvolucionado
    """
    print(f"üî¨ Aplicando Deconvoluci√≥n Cu√°ntica Espectral...")
    print(f"   Kernel: Gaussiano œÉ={sigma} Hz")
    print(f"   Iteraciones: {iterations}")
    
    # Crear kernel de convoluci√≥n (PSF - Point Spread Function)
    df = frequencies[1] - frequencies[0]
    kernel_size = int(5 * sigma / df)  # 5-sigma kernel
    kernel = np.exp(-0.5 * (np.arange(-kernel_size, kernel_size+1) * df / sigma)**2)
    kernel = kernel / np.sum(kernel)
    
    # Algoritmo Richardson-Lucy
    # Inicializar con el espectro observado
    deconvolved = spectrum.copy()
    deconvolved[deconvolved <= 0] = 1e-30  # Evitar divisiones por cero
    
    for i in range(iterations):
        # Convolucionar estimaci√≥n actual
        convolved = ndimage.convolve1d(deconvolved, kernel, mode='reflect')
        
        # Calcular correcci√≥n
        ratio = spectrum / (convolved + 1e-30)
        
        # Aplicar correcci√≥n con kernel invertido
        correction = ndimage.convolve1d(ratio, kernel, mode='reflect')
        
        # Actualizar estimaci√≥n
        deconvolved = deconvolved * correction
        
        # Asegurar positividad
        deconvolved = np.maximum(deconvolved, 1e-30)
    
    # Calcular mejora
    enhancement = np.max(deconvolved) / np.max(spectrum)
    
    print(f"   ‚úÖ Deconvoluci√≥n completada")
    print(f"   üìà Factor de mejora: {enhancement:.2f}x")
    
    return deconvolved


def combined_analysis(data, merger_time, sample_rate=4096, target_freq=141.7):
    """
    An√°lisis combinado: Wavelet + Deconvoluci√≥n + FFT tradicional
    
    Par√°metros:
    -----------
    data : TimeSeries
        Datos de strain preprocesados
    merger_time : float
        Tiempo GPS del merger
    sample_rate : float
        Frecuencia de muestreo
    target_freq : float
        Frecuencia objetivo
    
    Retorna:
    --------
    dict con resultados completos
    """
    print("\n" + "="*60)
    print("üéØ AN√ÅLISIS AVANZADO: WAVELET + DECONVOLUCI√ìN")
    print("="*60)
    
    # Extraer ringdown
    ringdown_start = merger_time + 0.01
    ringdown_end = ringdown_start + 0.05
    ringdown = data.crop(ringdown_start, ringdown_end)
    
    strain = ringdown.value
    times = ringdown.times.value - ringdown.times.value[0]
    
    print(f"üìä Analizando ringdown: {len(strain)} muestras ({len(strain)/sample_rate*1000:.1f} ms)")
    
    # 1. An√°lisis Wavelet
    wavelet_results = wavelet_transform_analysis(strain, target_freq, sample_rate)
    
    # 2. FFT tradicional para comparaci√≥n
    print(f"\nüîç Calculando FFT tradicional (control)...")
    freqs_fft = np.fft.rfftfreq(len(strain), 1/sample_rate)
    fft_spectrum = np.abs(np.fft.rfft(strain))**2
    
    # Enfocar en banda de inter√©s
    freq_mask = (freqs_fft >= 130) & (freqs_fft <= 160)
    freqs_band = freqs_fft[freq_mask]
    spectrum_band = fft_spectrum[freq_mask]
    
    # Detectar pico en FFT
    peak_idx_fft = np.argmax(spectrum_band)
    detected_freq_fft = freqs_band[peak_idx_fft]
    snr_fft = spectrum_band[peak_idx_fft] / np.median(spectrum_band)
    
    print(f"   üìä FFT - Frecuencia: {detected_freq_fft:.2f} Hz, SNR: {snr_fft:.2f}")
    
    # 3. Deconvoluci√≥n espectral
    deconvolved_spectrum = spectral_deconvolution(spectrum_band, freqs_band, sigma=0.5, iterations=15)
    
    # Detectar pico en espectro deconvolucionado
    peak_idx_deconv = np.argmax(deconvolved_spectrum)
    detected_freq_deconv = freqs_band[peak_idx_deconv]
    snr_deconv = deconvolved_spectrum[peak_idx_deconv] / np.median(deconvolved_spectrum)
    
    print(f"   üìä Deconvoluci√≥n - Frecuencia: {detected_freq_deconv:.2f} Hz, SNR: {snr_deconv:.2f}")
    
    # Validaci√≥n: diferencia con objetivo
    diff_wavelet = abs(wavelet_results['detected_freq'] - target_freq)
    diff_fft = abs(detected_freq_fft - target_freq)
    diff_deconv = abs(detected_freq_deconv - target_freq)
    
    print(f"\nüìè Diferencias con objetivo ({target_freq} Hz):")
    print(f"   Wavelet:       {diff_wavelet:.3f} Hz {'‚úÖ' if diff_wavelet < 1.0 else '‚ö†Ô∏è'}")
    print(f"   FFT:           {diff_fft:.3f} Hz {'‚úÖ' if diff_fft < 1.0 else '‚ö†Ô∏è'}")
    print(f"   Deconvoluci√≥n: {diff_deconv:.3f} Hz {'‚úÖ' if diff_deconv < 1.0 else '‚ö†Ô∏è'}")
    
    return {
        'wavelet': wavelet_results,
        'fft': {
            'frequencies': freqs_band,
            'spectrum': spectrum_band,
            'detected_freq': detected_freq_fft,
            'snr': snr_fft
        },
        'deconvolution': {
            'spectrum': deconvolved_spectrum,
            'detected_freq': detected_freq_deconv,
            'snr': snr_deconv
        },
        'times': times,
        'strain': strain
    }


def plot_combined_results(results, detector_name, output_dir='../results/figures'):
    """
    Visualizar resultados del an√°lisis combinado
    """
    os.makedirs(output_dir, exist_ok=True)
    
    fig = plt.figure(figsize=(16, 12))
    
    # 1. Serie temporal
    ax1 = plt.subplot(3, 2, 1)
    ax1.plot(results['times'] * 1000, results['strain'], 'b-', alpha=0.7)
    ax1.set_xlabel('Tiempo (ms)')
    ax1.set_ylabel('Strain')
    ax1.set_title(f'Serie Temporal - {detector_name}')
    ax1.grid(True, alpha=0.3)
    
    # 2. Espectrograma Wavelet
    ax2 = plt.subplot(3, 2, 2)
    wavelet_power = results['wavelet']['power']
    wavelet_freqs = results['wavelet']['frequencies']
    extent = [results['times'][0]*1000, results['times'][-1]*1000, 
              wavelet_freqs[0], wavelet_freqs[-1]]
    
    im = ax2.imshow(10*np.log10(wavelet_power + 1e-25), 
                    aspect='auto', origin='lower', extent=extent,
                    cmap='viridis', interpolation='bilinear')
    ax2.axhline(141.7, color='red', linestyle='--', linewidth=2, label='141.7 Hz objetivo')
    ax2.set_xlabel('Tiempo (ms)')
    ax2.set_ylabel('Frecuencia (Hz)')
    ax2.set_title('Espectrograma Wavelet (CWT)')
    ax2.legend(loc='upper right')
    plt.colorbar(im, ax=ax2, label='Potencia (dB)')
    
    # 3. Perfil frecuencial Wavelet
    ax3 = plt.subplot(3, 2, 3)
    freq_profile = np.mean(wavelet_power, axis=1)
    ax3.plot(wavelet_freqs, freq_profile, 'b-', linewidth=2, label='Perfil Wavelet')
    ax3.axvline(141.7, color='red', linestyle='--', linewidth=2, label='141.7 Hz objetivo')
    ax3.axvline(results['wavelet']['detected_freq'], color='green', 
                linestyle='--', linewidth=2, label=f"Detectado: {results['wavelet']['detected_freq']:.2f} Hz")
    ax3.set_xlabel('Frecuencia (Hz)')
    ax3.set_ylabel('Potencia Promedio')
    ax3.set_title('Perfil Frecuencial Wavelet')
    ax3.legend()
    ax3.grid(True, alpha=0.3)
    
    # 4. FFT tradicional
    ax4 = plt.subplot(3, 2, 4)
    ax4.semilogy(results['fft']['frequencies'], results['fft']['spectrum'], 
                 'b-', linewidth=1.5, label='Espectro FFT', alpha=0.7)
    ax4.axvline(141.7, color='red', linestyle='--', linewidth=2, label='141.7 Hz objetivo')
    ax4.axvline(results['fft']['detected_freq'], color='green',
                linestyle='--', linewidth=2, label=f"FFT: {results['fft']['detected_freq']:.2f} Hz")
    ax4.set_xlabel('Frecuencia (Hz)')
    ax4.set_ylabel('Potencia')
    ax4.set_title('Espectro FFT (Control)')
    ax4.legend()
    ax4.grid(True, alpha=0.3)
    
    # 5. Comparaci√≥n FFT vs Deconvoluci√≥n
    ax5 = plt.subplot(3, 2, 5)
    # Normalizar para comparaci√≥n
    fft_norm = results['fft']['spectrum'] / np.max(results['fft']['spectrum'])
    deconv_norm = results['deconvolution']['spectrum'] / np.max(results['deconvolution']['spectrum'])
    
    ax5.plot(results['fft']['frequencies'], fft_norm, 
             'b-', linewidth=2, label='FFT Original', alpha=0.7)
    ax5.plot(results['fft']['frequencies'], deconv_norm,
             'r-', linewidth=2, label='Deconvolucionado', alpha=0.9)
    ax5.axvline(141.7, color='green', linestyle='--', linewidth=2, label='141.7 Hz objetivo')
    ax5.set_xlabel('Frecuencia (Hz)')
    ax5.set_ylabel('Potencia Normalizada')
    ax5.set_title('Deconvoluci√≥n Cu√°ntica Espectral')
    ax5.legend()
    ax5.grid(True, alpha=0.3)
    
    # 6. Resumen de detecciones
    ax6 = plt.subplot(3, 2, 6)
    ax6.axis('off')
    
    summary_text = f"""
    RESUMEN DE DETECCIONES - {detector_name}
    {'='*40}
    
    Frecuencia Objetivo: 141.7 Hz
    
    M√©todo Wavelet (CWT):
      ‚Ä¢ Frecuencia: {results['wavelet']['detected_freq']:.3f} Hz
      ‚Ä¢ Diferencia: {abs(results['wavelet']['detected_freq'] - 141.7):.3f} Hz
      ‚Ä¢ SNR: {results['wavelet']['snr_wavelet']:.2f}
      
    M√©todo FFT (Control):
      ‚Ä¢ Frecuencia: {results['fft']['detected_freq']:.3f} Hz
      ‚Ä¢ Diferencia: {abs(results['fft']['detected_freq'] - 141.7):.3f} Hz
      ‚Ä¢ SNR: {results['fft']['snr']:.2f}
      
    Deconvoluci√≥n Cu√°ntica:
      ‚Ä¢ Frecuencia: {results['deconvolution']['detected_freq']:.3f} Hz
      ‚Ä¢ Diferencia: {abs(results['deconvolution']['detected_freq'] - 141.7):.3f} Hz
      ‚Ä¢ SNR: {results['deconvolution']['snr']:.2f}
      
    VALIDACI√ìN:
    """
    
    # Verificar si todas las detecciones est√°n cerca del objetivo
    all_close = all([
        abs(results['wavelet']['detected_freq'] - 141.7) < 1.0,
        abs(results['fft']['detected_freq'] - 141.7) < 1.0,
        abs(results['deconvolution']['detected_freq'] - 141.7) < 1.0
    ])
    
    summary_text += "    ‚úÖ CONFIRMADA\n" if all_close else "    ‚ö†Ô∏è  Revisar resultados\n"
    summary_text += f"\n    Firma arm√≥nica coherente detectada\n    mediante interferometr√≠a cu√°ntica"
    
    ax6.text(0.1, 0.5, summary_text, fontsize=10, family='monospace',
             verticalalignment='center', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.3))
    
    plt.tight_layout()
    
    filename = f'{output_dir}/analisis_wavelet_deconv_{detector_name}.png'
    plt.savefig(filename, dpi=150, bbox_inches='tight')
    print(f"\nüíæ Gr√°fico guardado: {filename}")
    plt.close()


def main():
    """
    Ejecutar an√°lisis avanzado con datos de GW150914 (control)
    """
    print("üåå AN√ÅLISIS WAVELET + DECONVOLUCI√ìN CU√ÅNTICA")
    print("="*60)
    
    # Cargar datos de GW150914 como control
    try:
        print("üì° Cargando datos GW150914 desde GWOSC...")
        
        merger_time = 1126259462.423
        start = merger_time - 16
        end = merger_time + 16
        
        h1_data = TimeSeries.fetch_open_data('H1', start, end, sample_rate=4096)
        
        print("   ‚úÖ Datos cargados exitosamente")
        
        # Preprocesamiento
        print("\nüîß Preprocesamiento...")
        h1_data = h1_data.highpass(20)
        h1_data = h1_data.notch(60)
        h1_data = h1_data.notch(120)
        
        # An√°lisis combinado
        results = combined_analysis(h1_data, merger_time, 4096, 141.7)
        
        # Visualizaci√≥n
        print("\nüìä Generando visualizaciones...")
        plot_combined_results(results, 'H1')
        
        # Conclusi√≥n
        print("\n" + "="*60)
        print("‚úÖ AN√ÅLISIS COMPLETADO")
        print("="*60)
        print(f"\nFirma arm√≥nica coherente en 141.7 Hz:")
        print(f"  ‚Ä¢ Detectada por Wavelet: {abs(results['wavelet']['detected_freq'] - 141.7) < 1.0}")
        print(f"  ‚Ä¢ Detectada por FFT: {abs(results['fft']['detected_freq'] - 141.7) < 1.0}")
        print(f"  ‚Ä¢ Detectada por Deconvoluci√≥n: {abs(results['deconvolution']['detected_freq'] - 141.7) < 1.0}")
        print(f"\nüéØ Validaci√≥n: f‚ÇÄ = Œ±Œ® ¬∑ RŒ® ‚âà {results['deconvolution']['detected_freq']:.2f} Hz")
        print("üí´ 'Lo que era un s√≠mbolo ahora ha sido o√≠do'")
        
        return 0
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    warnings.filterwarnings('ignore', category=RuntimeWarning)
    sys.exit(main())
