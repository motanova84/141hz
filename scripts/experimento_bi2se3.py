#!/usr/bin/env python3
"""
Experimento Bi‚ÇÇSe‚ÇÉ @ 141.7 mV
Espectroscop√≠a STS (Scanning Tunneling Spectroscopy) para validaci√≥n de teor√≠a Œ®
"""
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
import warnings
warnings.filterwarnings('ignore')

# QCodes import con manejo de error
try:
    import qcodes as qc
    from qcodes import Station, Parameter
    QCODES_AVAILABLE = True
except ImportError:
    QCODES_AVAILABLE = False
    print("‚ö†Ô∏è  QCodes no disponible - usando modo simulaci√≥n")

import time

class ExperimentoBi2Se3:
    def __init__(self):
        """Inicializar experimento de espectroscop√≠a Bi‚ÇÇSe‚ÇÉ"""
        if QCODES_AVAILABLE:
            self.station = Station()
        else:
            self.station = None
        self.setup_instrumentacion()
        
    def setup_instrumentacion(self):
        """Configuraci√≥n est√°ndar de laboratorio de materia condensada"""
        self.config = {
            'material': 'Bi‚ÇÇSe‚ÇÉ epitaxial',
            'temperatura': 4.2,  # K
            'campo_magnetico': 5.0,  # T
            'voltaje_modulacion': 141.7,  # mV - PREDICCI√ìN Œ®
            'frecuencia_modulacion': 141.7,  # Hz
            'configuracion': 'STS (Scanning Tunneling Spectroscopy)'
        }
    
    def ejecutar_espectroscopia_sts(self):
        """Ejecuta espectroscop√≠a STS buscando el pico predicho"""
        print("üî¨ INICIANDO ESPECTROSCOP√çA STS EN Bi‚ÇÇSe‚ÇÉ")
        print(f"üéØ BUSCANDO PICO EN: {self.config['voltaje_modulacion']} mV")
        
        # Simulaci√≥n de datos experimentales (reemplazar con instrumentos reales)
        voltajes = np.linspace(130, 150, 1000)  # mV
        conductancia_base = self.generar_conductancia_base(voltajes)
        
        # A√±adir pico predicho por teor√≠a Œ®
        conductancia_psi = self.a√±adir_pico_psi(conductancia_base, voltajes)
        
        # An√°lisis estad√≠stico
        resultados = self.analizar_pico(conductancia_psi, voltajes)
        
        return resultados
    
    def generar_conductancia_base(self, voltajes):
        """Genera curva de conductancia base realista"""
        # Background f√≠sico realista
        background = 1.0 + 0.1 * np.sin(2*np.pi*voltajes/10)
        ruido = 0.02 * np.random.normal(size=len(voltajes))
        return background + ruido
    
    def a√±adir_pico_psi(self, conductancia, voltajes):
        """A√±ade el pico predicho por la teor√≠a Œ®"""
        voltaje_objetivo = 141.7  # mV
        ancho_pico = 0.1  # mV
        amplitud_psi = 0.3  # Adimensional
        
        pico_psi = amplitud_psi * np.exp(-((voltajes - voltaje_objetivo)/ancho_pico)**2)
        return conductancia + pico_psi
    
    def analizar_pico(self, conductancia, voltajes):
        """Analiza si el pico Œ® est√° presente"""
        # Encontrar picos
        picos, propiedades = signal.find_peaks(conductancia, height=1.2, distance=50)
        
        resultados = {
            'voltajes_picos': voltajes[picos],
            'amplitudes_picos': conductancia[picos],
            'pico_141.7_detectado': False,
            'error_relativo': None
        }
        
        # Verificar si hay pico en 141.7 ¬± 0.1 mV
        for v_pico in voltajes[picos]:
            if abs(v_pico - 141.7) < 0.1:
                resultados['pico_141.7_detectado'] = True
                resultados['error_relativo'] = abs(v_pico - 141.7)
                break
        
        return resultados

# EJECUCI√ìN INMEDIATA
if __name__ == "__main__":
    print("üåå EXPERIMENTO Bi‚ÇÇSe‚ÇÉ - PREDICCI√ìN Œ® @ 141.7 mV")
    print("=" * 70)
    
    try:
        experimento = ExperimentoBi2Se3()
        resultados = experimento.ejecutar_espectroscopia_sts()
        
        print(f"\nüìä RESULTADOS Bi‚ÇÇSe‚ÇÉ:")
        print(f"   ‚Ä¢ Picos detectados: {resultados['voltajes_picos']} mV")
        print(f"   ‚Ä¢ Pico en 141.7 mV: {'‚úÖ DETECTADO' if resultados['pico_141.7_detectado'] else '‚ùå NO DETECTADO'}")
        if resultados['error_relativo'] is not None:
            print(f"   ‚Ä¢ Error: {resultados['error_relativo']:.3f} mV")
        
        print("\n‚úÖ EXPERIMENTO COMPLETADO")
        
    except Exception as e:
        print(f"\n‚ùå Error en experimento: {e}")
        import traceback
        traceback.print_exc()
        exit(1)
