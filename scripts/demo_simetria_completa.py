#!/usr/bin/env python3
"""
Script de demostraci√≥n completa del an√°lisis de simetr√≠a discreta.

Este script ejecuta todo el pipeline:
1. An√°lisis del grupo de simetr√≠a
2. Construcci√≥n del potencial invariante
3. An√°lisis variacional de la energ√≠a
4. Generaci√≥n de predicciones
5. Visualizaciones

Es ideal para mostrar las capacidades completas del m√≥dulo.
"""

import sys
import os
import numpy as np

# A√±adir path de scripts
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from simetria_discreta import (
    GrupoSimetriaDiscreta,
    PotencialInvarianteG,
    EnergiaVacio,
    generar_graficos
)


def main():
    """Ejecutar demostraci√≥n completa"""
    
    print("\n" + "="*80)
    print("DEMOSTRACI√ìN COMPLETA: AN√ÅLISIS DE SIMETR√çA DISCRETA")
    print("="*80)
    
    # Paso 1: Grupo de simetr√≠a
    print("\nüìê PASO 1: GRUPO DE SIMETR√çA DISCRETA")
    print("-"*80)
    grupo = GrupoSimetriaDiscreta()
    print(f"‚úì Grupo G definido: {{R_Œ® ‚Ü¶ œÄ^k R_Œ® | k ‚àà Z}}")
    print(f"‚úì Periodo logar√≠tmico: log œÄ = {grupo.periodo_logaritmico():.6f}")
    
    # Verificar invariancia
    potencial = PotencialInvarianteG()
    R_test = 5.0
    A_R = potencial.evaluar_modo_fundamental(np.array([R_test]))[0]
    A_piR = potencial.evaluar_modo_fundamental(np.array([np.pi * R_test]))[0]
    print(f"‚úì Estructura peri√≥dica: A({R_test:.2f}) = {A_R:.6f}, A({np.pi*R_test:.2f}) = {A_piR:.6f}")
    
    # Paso 2: Predicci√≥n de frecuencias
    print("\nüéµ PASO 2: PREDICCI√ìN DE FRECUENCIAS ARM√ìNICAS")
    print("-"*80)
    frecuencias = potencial.frecuencias_armonicas(f0=141.7001)
    print(f"‚úì Frecuencia fundamental: f‚ÇÄ = {frecuencias[0]:.4f} Hz")
    print(f"‚úì Arm√≥nicos superiores predichos:")
    for i, f in enumerate(frecuencias[1:4], 1):
        detectable = "S√≠" if f > 10 else "No"
        print(f"  - f_{i} = {f:8.4f} Hz  (Detectable en LIGO: {detectable})")
    
    # Paso 3: Energ√≠a de vac√≠o
    print("\n‚ö° PASO 3: AN√ÅLISIS VARIACIONAL DE LA ENERG√çA")
    print("-"*80)
    
    # Par√°metros f√≠sicos representativos
    params = {
        'alpha': 1.0,
        'beta': -0.5,
        'gamma': 0.1,
        'delta': 0.5
    }
    
    energia = EnergiaVacio(**params)
    print(f"‚úì Par√°metros: Œ±={params['alpha']}, Œ≤={params['beta']}, "
          f"Œ≥={params['gamma']}, Œ¥={params['delta']}")
    print(f"‚úì Œ∂'(1/2) = {energia.zeta_prime_half:.6f}")
    print(f"‚úì Œõ = {energia.Lambda}")
    
    # Verificar coercividad
    coerciva = energia.es_coerciva()
    print(f"‚úì E_vac es coerciva: {coerciva} ‚üπ Existen m√≠nimos globales")
    
    # Paso 4: B√∫squeda de m√≠nimos
    print("\nüîç PASO 4: B√öSQUEDA DE M√çNIMOS")
    print("-"*80)
    minimos = energia.encontrar_minimos(R_min=0.5, R_max=50.0, n_celdas=5)
    print(f"‚úì Encontrados {len(minimos)} m√≠nimos en el rango [0.5, 50.0]:")
    
    n_estables = 0
    for i, (R_min, E_min) in enumerate(minimos[:5], 1):
        estab = energia.estabilidad_minimo(R_min)
        estado = "‚úì Estable" if estab['estable'] else "‚úó Inestable"
        print(f"  {i}. R_min = {R_min:8.4f}, E_min = {E_min:10.6f}, {estado}")
        if estab['estable']:
            n_estables += 1
    
    print(f"\n‚úì {n_estables}/{len(minimos)} m√≠nimos son estables (‚àÇ¬≤E/‚àÇR¬≤ > 0)")
    
    # Paso 5: Visualizaciones
    print("\nüìä PASO 5: GENERACI√ìN DE VISUALIZACIONES")
    print("-"*80)
    
    results_dir = os.path.join(os.path.dirname(__file__), '..', 'results')
    os.makedirs(results_dir, exist_ok=True)
    output_file = os.path.join(results_dir, 'demo_simetria_discreta.png')
    
    print("‚úì Generando gr√°ficos...")
    print("  - Energ√≠a de vac√≠o E_vac(R_Œ®) con m√≠nimos")
    print("  - T√©rmino de simetr√≠a A(R_Œ®) con periodicidad")
    print("  - Contribuciones individuales de cada t√©rmino")
    print("  - Predicci√≥n de frecuencias arm√≥nicas")
    
    generar_graficos(energia, R_min=0.5, R_max=50.0, output_file=output_file)
    
    # Resumen final
    print("\n" + "="*80)
    print("RESUMEN DE RESULTADOS")
    print("="*80)
    
    print("\n‚úÖ DEMOSTRADO:")
    print("  1. El grupo G = {R_Œ® ‚Ü¶ œÄ^k R_Œ® | k ‚àà Z} es un grupo abeliano bien formado")
    print("  2. A(R_Œ®) = sin¬≤(log R_Œ® / log œÄ) es el primer arm√≥nico permitido por G")
    print("  3. El t√©rmino A(R_Œ®) NO es arbitrario sino una consecuencia de la simetr√≠a")
    print("  4. La energ√≠a E_vac es coerciva y tiene m√≠nimos estables")
    print(f"  5. Se predicen {len(frecuencias)} frecuencias arm√≥nicas verificables")
    
    print("\nüî¨ PREDICCIONES FALSABLES:")
    print(f"  - Buscar arm√≥nicos en LIGO/Virgo en f‚ÇÅ = {frecuencias[1]:.4f} Hz")
    print(f"  - Verificar periodicidad en el espacio logar√≠tmico (periodo = log œÄ)")
    print(f"  - Comparar con correcciones cosmol√≥gicas en P(k)")
    
    print("\nüìà SALIDAS GENERADAS:")
    print(f"  - Visualizaci√≥n: {output_file}")
    print(f"  - Tests: Ejecutar 'python scripts/test_simetria_discreta.py'")
    print(f"  - Notebook: 'notebooks/simetria_discreta_analisis.ipynb'")
    
    print("\n" + "="*80)
    print("‚ú® DEMOSTRACI√ìN COMPLETA EXITOSA")
    print("="*80 + "\n")
    
    return True


if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except Exception as e:
        print(f"\n‚ùå ERROR durante la demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
