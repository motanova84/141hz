#!/usr/bin/env python3
"""
Demo del an√°lisis GW250114 usando datos de GW150914
Muestra c√≥mo funcionar√° el an√°lisis cuando GW250114 est√© disponible
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
import os
import sys
import json

# Importar nuestro analizador principal
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
from analizar_gw250114 import GW250114Analyzer


class GW150914Demo(GW250114Analyzer):
    """Demo usando datos sint√©ticos basados en GW150914"""
    
    def __init__(self, target_frequency: float = 141.7001):
        super().__init__(target_frequency)
        print("üî¨ Modo DEMO - Simulaci√≥n con datos sint√©ticos")
        
    def generate_synthetic_data(self) -> tuple:
        """Generar datos sint√©ticos que incluyen la se√±al de 141.7 Hz"""
        print("üß™ Generando datos sint√©ticos...")
        
        # Par√°metros temporales
        sample_rate = 4096
        duration = 32  # segundos
        t = np.arange(0, duration, 1/sample_rate)
        
        # Tiempo GPS simulado
        gps_sim = 1126259462.423  # Tiempo de GW150914
        
        # 1. Ruido gaussiano blanco
        np.random.seed(42)  # Para reproducibilidad
        noise_h1 = np.random.normal(0, 1e-21, len(t))
        noise_l1 = np.random.normal(0, 1e-21, len(t))
        
        # 2. A√±adir picos espectrales t√≠picos de LIGO
        # L√≠neas de calibraci√≥n
        calib_freqs = [35.9, 36.7, 37.3, 331.3, 1144.3]
        for freq in calib_freqs:
            phase_h1 = np.random.uniform(0, 2*np.pi)
            phase_l1 = np.random.uniform(0, 2*np.pi)
            amp = 5e-22
            noise_h1 += amp * np.sin(2*np.pi*freq*t + phase_h1)
            noise_l1 += amp * np.sin(2*np.pi*freq*t + phase_l1)
            
        # 3. A√±adir l√≠neas de red el√©ctrica (60 Hz y arm√≥nicos)
        for n in range(1, 4):
            freq = 60 * n
            amp = 3e-22 / n
            noise_h1 += amp * np.sin(2*np.pi*freq*t)
            noise_l1 += amp * np.sin(2*np.pi*freq*t)
        
        # 4. ¬°A√ëADIR LA SE√ëAL DE 141.7 Hz EN EL RINGDOWN!
        merger_idx = len(t) // 2  # Centro temporal
        ringdown_start = merger_idx + int(0.01 * sample_rate)  # 10 ms despu√©s
        ringdown_duration = int(0.05 * sample_rate)  # 50 ms de duraci√≥n
        
        if ringdown_start + ringdown_duration < len(t):
            # Crear ventana de ringdown
            ringdown_indices = slice(ringdown_start, ringdown_start + ringdown_duration)
            ringdown_t = t[ringdown_indices] - t[ringdown_start]
            
            # Se√±al senoidal amortiguada en 141.7001 Hz (frecuencia no√©sica)
            freq_target = self.target_frequency
            amplitude = 2e-21  # Amplitud m√°s fuerte para mejor detecci√≥n
            decay_time = 0.025  # 25 ms de tiempo de decaimiento (Q~200)
            phase_h1 = 0.5  # Fase ligeramente diferente entre detectores
            phase_l1 = 0.8
            
            # Crear se√±al m√°s coherente
            signal_h1 = amplitude * np.exp(-ringdown_t/decay_time) * \
                       np.sin(2*np.pi*freq_target*ringdown_t + phase_h1)
            signal_l1 = amplitude * 0.9 * np.exp(-ringdown_t/decay_time) * \
                       np.sin(2*np.pi*freq_target*ringdown_t + phase_l1)
            
            # A√±adir al ruido en toda la regi√≥n del ringdown para mejor coherencia
            noise_h1[ringdown_indices] += signal_h1
            noise_l1[ringdown_indices] += signal_l1
            
            # Tambi√©n a√±adir algo de se√±al antes del ringdown (d√©bil)
            pre_merger = slice(merger_idx - int(0.01 * sample_rate), merger_idx)
            pre_t = t[pre_merger] - t[merger_idx - int(0.01 * sample_rate)]
            weak_signal_h1 = amplitude * 0.3 * np.sin(2*np.pi*freq_target*pre_t + phase_h1)
            weak_signal_l1 = amplitude * 0.3 * np.sin(2*np.pi*freq_target*pre_t + phase_l1)
            noise_h1[pre_merger] += weak_signal_h1
            noise_l1[pre_merger] += weak_signal_l1
            
            print(f"   ‚úÖ Se√±al inyectada en {freq_target} Hz")
            print(f"   üìç Ringdown: {ringdown_start/sample_rate:.3f} - {(ringdown_start+ringdown_duration)/sample_rate:.3f} s")
            print(f"   üí™ Amplitud: {amplitude:.2e}, Q ‚âà {freq_target*decay_time:.0f}")
        
        # Crear objetos TimeSeries simulados
        from gwpy.timeseries import TimeSeries
        from astropy import units as u
        
        h1_ts = TimeSeries(noise_h1, sample_rate=sample_rate*u.Hz, 
                          t0=gps_sim*u.s, name='H1:GWOSC-16KHZ_R1_STRAIN')
        l1_ts = TimeSeries(noise_l1, sample_rate=sample_rate*u.Hz,
                          t0=gps_sim*u.s, name='L1:GWOSC-16KHZ_R1_STRAIN')
        
        return h1_ts, l1_ts, gps_sim
    
    def download_official_data(self, event_name: str = 'GW150914-DEMO') -> tuple:
        """Override para usar datos sint√©ticos"""
        print(f"üåê Generando datos demo para {event_name}...")
        return self.generate_synthetic_data()
    
    def run_demo(self):
        """Ejecutar demostraci√≥n completa"""
        print("\n" + "="*70)
        print("üî¨ DEMO: An√°lisis GW250114 con datos sint√©ticos")
        print("   (Simulaci√≥n de c√≥mo funcionar√° con datos reales)")
        print("="*70)
        
        # Ejecutar an√°lisis completo
        results = self.analyze_complete('GW150914-DEMO')
        
        # An√°lisis de resultados
        print("\n" + "="*50)
        print("üìä INTERPRETACI√ìN DE RESULTADOS")
        print("="*50)
        
        if 'error' not in results:
            h1_freq = results['h1_frequency']
            l1_freq = results['l1_frequency']
            freq_diff = abs(h1_freq - l1_freq)
            
            print(f"Frecuencia objetivo: {self.target_frequency} Hz")
            print(f"Detectada en H1: {h1_freq:.4f} Hz")
            print(f"Detectada en L1: {l1_freq:.4f} Hz")
            print(f"Diferencia H1-L1: {freq_diff:.4f} Hz")
            print(f"SNR H1: {results['h1_snr']:.2f}")
            print(f"SNR L1: {results['l1_snr']:.2f}")
            print(f"p-value: {results['p_value']:.4f}")
            print(f"Bayes Factor: {results['bayes_factor_combined']:.2f}")
            print(f"Validaci√≥n cruzada: {'‚úÖ PAS√ì' if results['validation_passed'] else '‚ùå FALL√ì'}")
            
            # Verificar criterios de detecci√≥n
            criteria = {
                'Frecuencia precisa (¬±0.01 Hz)': abs(h1_freq - self.target_frequency) < 0.01,
                'Consistencia H1-L1 (¬±0.1 Hz)': freq_diff < 0.1,
                'Significancia estad√≠stica (p<0.01)': results['p_value'] < 0.01,
                'Evidencia bayesiana fuerte (BF>10)': results['bayes_factor_combined'] > 10,
                'SNR suficiente (>3 en ambos)': results['h1_snr'] > 3 and results['l1_snr'] > 3
            }
            
            print("\nüéØ CRITERIOS DE DETECCI√ìN:")
            all_passed = True
            for criterion, passed in criteria.items():
                status = "‚úÖ" if passed else "‚ùå"
                print(f"   {status} {criterion}")
                if not passed:
                    all_passed = False
            
            print(f"\n{'üéâ DETECCI√ìN CONFIRMADA' if all_passed else '‚ö†Ô∏è  DETECCI√ìN PARCIAL'}")
            
            if all_passed:
                print("\nüìù RESULTADO CIENT√çFICO:")
                print(f"\"Detectamos una componente espectral en {self.target_frequency:.4f} Hz")
                print(f" en el ringdown del evento simulado, con Bayes Factor BF = {results['bayes_factor_combined']:.1f}")
                print(f" (>10), significancia p = {results['p_value']:.4f} (<0.01),")
                print(f" consistente entre los detectores H1 y L1.\"")
        
        return results


def main():
    """Funci√≥n principal del demo"""
    # Crear y ejecutar demo
    demo = GW150914Demo(target_frequency=141.7001)
    results = demo.run_demo()
    
    # Guardar resultados del demo
    output_dir = '../results'
    os.makedirs(output_dir, exist_ok=True)
    
    demo_file = f'{output_dir}/demo_results.json'
    with open(demo_file, 'w') as f:
        # Preparar datos para JSON
        json_results = {}
        for key, value in results.items():
            if isinstance(value, (np.integer, np.floating)):
                json_results[key] = float(value)
            elif isinstance(value, np.ndarray):
                json_results[key] = value.tolist()
            else:
                json_results[key] = value
        json.dump(json_results, f, indent=2)
    
    print(f"\nüíæ Resultados del demo guardados en: {demo_file}")
    print("\n" + "="*70)
    print("‚ÑπÔ∏è  Este demo muestra c√≥mo funcionar√° el an√°lisis cuando")
    print("   GWOSC libere los datos oficiales de GW250114.")
    print("   La se√±al de 141.7001 Hz fue inyectada sint√©ticamente.")
    print("="*70)


if __name__ == "__main__":
    main()