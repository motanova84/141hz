#!/usr/bin/env python3
"""
Integraci√≥n del Sistema de Alertas con el Pipeline de Validaci√≥n
Demuestra c√≥mo integrar alertas en el flujo de validaci√≥n existente
"""

import sys
import asyncio
from pathlib import Path

# Agregar directorio de scripts al path
sys.path.insert(0, str(Path(__file__).parent))

from sistema_alertas_avanzado import SistemaAlertasAvanzado


async def validacion_con_alertas():
    """
    Ejemplo de integraci√≥n del sistema de alertas con validaci√≥n cient√≠fica
    """
    print("üåå VALIDACI√ìN GW250114 CON SISTEMA DE ALERTAS")
    print("=" * 70)
    
    # Inicializar sistema de alertas
    sistema_alertas = SistemaAlertasAvanzado()
    
    # Simular resultados de validaci√≥n cient√≠fica
    # En producci√≥n, estos datos vendr√≠an de los m√≥dulos de an√°lisis
    evento = {
        'nombre': 'GW250114',
        'detector': 'H1-L1',
        'tiempo_gps': 1234567890.123,
        'masa_total': 65.0,
        'masa_final': 62.0
    }
    
    print("\nüî¨ Ejecutando an√°lisis cient√≠fico...")
    print("   1. An√°lisis de frecuencias...")
    print("   2. C√°lculo de SNR...")
    print("   3. Estimaci√≥n de p-value...")
    print("   4. Bayes Factor...")
    
    # Resultados simulados
    resultados = {
        'frecuencia': 141.7001,
        'diferencia': 0.0000,  # Diferencia con predicci√≥n te√≥rica
        'snr': 15.2,
        'p_value': 0.0001,
        'bayes_factor': 150.5,
        'q_factor': 8.5,
        'coherencia_h1_l1': 0.87
    }
    
    print("   ‚úÖ An√°lisis completado\n")
    
    # Verificar criterios de validaci√≥n
    criterios_cumplidos = {
        'frecuencia_match': abs(resultados['frecuencia'] - 141.7001) < 0.01,
        'snr_alto': resultados['snr'] > 10,
        'significancia': resultados['p_value'] < 0.01,
        'bayes_favorable': resultados['bayes_factor'] > 10,
        'coherencia_alta': resultados['coherencia_h1_l1'] > 0.7
    }
    
    print("üìä CRITERIOS DE VALIDACI√ìN")
    print("=" * 70)
    for criterio, cumplido in criterios_cumplidos.items():
        emoji = "‚úÖ" if cumplido else "‚ùå"
        print(f"   {emoji} {criterio}: {cumplido}")
    
    # Determinar si se cumplieron todos los criterios
    todos_cumplidos = all(criterios_cumplidos.values())
    
    if todos_cumplidos:
        print("\nüåü ¬°TODOS LOS CRITERIOS CUMPLIDOS!")
        print("üö® Activando alerta de M√ÅXIMA PRIORIDAD...\n")
        
        # Enviar alerta de m√°xima prioridad
        await sistema_alertas.alerta_validacion_psi(evento, resultados)
        
    else:
        print("\n‚ö†Ô∏è  No todos los criterios fueron cumplidos")
        print("üìù Enviando alerta de prioridad MEDIA...\n")
        
        mensaje = f"""
üìä ACTUALIZACI√ìN AN√ÅLISIS GW250114

EVENTO: {evento['nombre']}
ESTADO: En an√°lisis
FRECUENCIA DETECTADA: {resultados['frecuencia']:.4f} Hz
SNR: {resultados['snr']:.2f}

Criterios cumplidos: {sum(criterios_cumplidos.values())}/{len(criterios_cumplidos)}

Requiere an√°lisis adicional.
        """
        
        await sistema_alertas.enviar_alertas_multicanal(mensaje, 'media', evento, resultados)
    
    # Generar reporte final
    print("\n" + "=" * 70)
    print("üìà REPORTE DE ALERTAS ENVIADAS")
    print("=" * 70)
    
    reporte = sistema_alertas.generar_reporte_alertas()
    print(f"Total de alertas: {reporte['total_alertas']}")
    print("\nPor prioridad:")
    for prioridad, cantidad in reporte['alertas_por_prioridad'].items():
        if cantidad > 0:
            print(f"   ‚Ä¢ {prioridad}: {cantidad}")
    
    return todos_cumplidos


async def ejemplo_alertas_progresivas():
    """
    Ejemplo de alertas progresivas seg√∫n el nivel de confianza
    """
    print("\n\n" + "=" * 70)
    print("üîî EJEMPLO: ALERTAS PROGRESIVAS")
    print("=" * 70)
    
    sistema = SistemaAlertasAvanzado()
    
    evento_base = {
        'nombre': 'GW250114',
        'detector': 'H1-L1'
    }
    
    # Escenario 1: SNR bajo - Alerta baja
    print("\nüìä Escenario 1: SNR bajo (4.5)")
    resultados_1 = {
        'frecuencia': 141.7001,
        'snr': 4.5,
        'p_value': 0.05,
        'diferencia': 0.0001
    }
    
    mensaje_1 = f"Detecci√≥n preliminar - SNR: {resultados_1['snr']}"
    await sistema.enviar_alertas_multicanal(mensaje_1, 'baja', evento_base, resultados_1)
    
    # Escenario 2: SNR medio - Alerta media
    print("\nüìä Escenario 2: SNR medio (8.0)")
    resultados_2 = {
        'frecuencia': 141.7001,
        'snr': 8.0,
        'p_value': 0.02,
        'diferencia': 0.0001
    }
    
    mensaje_2 = f"Detecci√≥n prometedora - SNR: {resultados_2['snr']}"
    await sistema.enviar_alertas_multicanal(mensaje_2, 'media', evento_base, resultados_2)
    
    # Escenario 3: SNR alto - Alerta alta
    print("\nüìä Escenario 3: SNR alto (12.0)")
    resultados_3 = {
        'frecuencia': 141.7001,
        'snr': 12.0,
        'p_value': 0.005,
        'diferencia': 0.0001
    }
    
    mensaje_3 = f"Detecci√≥n fuerte - SNR: {resultados_3['snr']}"
    await sistema.enviar_alertas_multicanal(mensaje_3, 'alta', evento_base, resultados_3)
    
    # Escenario 4: Validaci√≥n completa - Alerta m√°xima
    print("\nüìä Escenario 4: Validaci√≥n completa")
    resultados_4 = {
        'frecuencia': 141.7001,
        'snr': 15.2,
        'p_value': 0.0001,
        'bayes_factor': 150.5,
        'diferencia': 0.0000
    }
    
    await sistema.alerta_validacion_psi(evento_base, resultados_4)


async def main():
    """Ejecutar ejemplos de integraci√≥n"""
    try:
        # Ejemplo 1: Validaci√≥n con alertas
        resultado = await validacion_con_alertas()
        
        # Ejemplo 2: Alertas progresivas
        await ejemplo_alertas_progresivas()
        
        print("\n\n" + "=" * 70)
        print("‚úÖ EJEMPLOS COMPLETADOS")
        print("=" * 70)
        print("\nüí° NOTAS:")
        print("   ‚Ä¢ Configurar credenciales en .env para alertas reales")
        print("   ‚Ä¢ Ver config/alertas.env.template para plantilla")
        print("   ‚Ä¢ Logs de alertas guardados en results/logs/alertas.log")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Ejecuci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    asyncio.run(main())
